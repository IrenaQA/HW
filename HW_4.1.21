package com.company;
import java.util.Scanner;
import java.util.Random;

public class Main {

    private static void Print()
    {
        System.out.println("Hello world!");
    }

    private static void Print_1_To_100(){
        for (int i=1;i<=100;i++)
            System.out.print(i+" ");
        System.out.print("\n");
    }
    private static void ZugiOrNot(Scanner num)
    {
        System.out.println("please enter a number: ");
        int number=num.nextInt();
        if(number%2==0)
            System.out.println("Zugi.");
        else
            System.out.println("Not zugi.");
    }

    private static void ZugiOrNot_2(int number)
    {
        if(number%2==0)
            System.out.println("Zugi.");
        else
            System.out.println("Not zugi.");
    }

    private static void A()
    {
        System.out.println("Calling function B");
        //B();
    }

    private static void B()
    {
        System.out.println("Calling function A");
        //A();
    }

    public static void main(String[] args) {
        Scanner num = new Scanner(System.in);
        //1
        Print();
        //2
        Print_1_To_100();
        //3
        ZugiOrNot(num);
        //4
        System.out.println("please enter a number: ");
        int number=num.nextInt();
        ZugiOrNot_2(number);
        //5

         //Step Into A method is about to be invoked, and you want to debug into the code of that method, so the next step is to go into that method and continue debugging step-by-step.
         //Step Over A method is about to be invoked, but you're not interested in debugging this particular invocation, so you want the debugger to execute that method completely as one entire step.

        //6
        //This is not the same x, because what happens in a function is for the function only and what is defined in main is for main only.
        // unless we use a global variable that is defined globally and not inside the main or function.

        //7
        // This would cause an endless loop because the two functions will never stop calling etch other.
        A();
    }
}
